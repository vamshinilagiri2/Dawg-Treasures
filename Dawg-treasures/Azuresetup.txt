# Prerequisites
As a Java developer, you’re already familiar with Spring applications. As you complete the exercises in this module, you’ll use a personal Azure account. Make sure that you have the following resources:


- An Azure subscription
- Local installations of Java JDK (1.8 or later), Maven (3.0 or later), and the Azure CLI (2.12 or later)
# Step 1: Create MySQL Server
First, let’s provision the Azure MySQL Server instance using the Azure CLI. This command sets up the MySQL server with specified configurations, including location, pricing tier, storage size, and administrator credentials.

To begin, let’s provision an Azure MySQL Server instance using the Azure CLI.

az mysql server create \
--resource-group my_group \   # Specifies the resource group.
--name my-db \    # Specifies the name of the MySQL server.
--location eastus \      # Specifies the geographic location. 
--sku-name B_Gen5_1 \  # Specifies the pricing tier and performance. 
--storage-size 5120 \    # Specifies the storage capacity.
--admin-user Admin \      # Specifies the administrator username. 
--admin-password ****     # Specifies the administrator password.         
Step 2: Configure Firewall Rules
Next, define firewall rules to allow access from specific IP addresses to your MySQL server. This step ensures secure communication between your Spring Boot application and the Azure MySQL Server.

az mysql server firewall-rule create \
--resource-group my_group\
--name myLocalIP \
--server-name my-db \
--start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0                  # Specifies the your local IP address        
Step 3: Start/Stop Server (Optional)
Optionally, use the following commands to start or stop the MySQL server as needed.

# Start the server
az mysql server start --resource-group my_group --name my-db

# Stop the server
az mysql server stop --resource-group my_group --name my-db        
Step 4: Update Server Configuration
After creating the MySQL server instance, it’s important to periodically review and update the server configurations. Here are some key areas to focus on.


Security: Regularly review and enhance security measures such as updating passwords, enabling encryption for data in transit, and configuring firewall rules to restrict access.
Performance: Fine-tune server settings to optimize performance, including adjusting memory allocation and connection pool settings.
Backups: Set up automated backups and disaster recovery plans to protect against data loss.
Monitoring: Implement monitoring tools to track server metrics and receive alerts for critical events.
Scaling: Evaluate scaling options to accommodate growing workloads, such as vertical scaling (increasing resources) or horizontal scaling (adding replicas).
By keeping these considerations in mind and updating server configurations as needed, you can ensure the continued reliability and security of your MySQL server in your Spring Boot application environment.

Step 5: Create Database
If required, create a new database on the MySQL server for storing data.

az mysql db create \
--resource-group my_group \
--name demo \
--server-name my-db        
Step 6: Configure Spring Boot Application Properties
Update the application.properties file in your Spring Boot application to connect to the Azure MySQL Server. Configure the JDBC URL, username, and password as follows:

# Azure MySQL configuration
spring.datasource.url=jdbc:mysql://my-db.mysql.database.azure.com:3306/demo?serverTimezone=UTC # <my-db> Specifies the name of the MySQL server
spring.datasource.username=****
spring.datasource.password=****
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Enable SQL logging
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop        
Step 7: Add Required Dependencies
Ensure your Spring Boot application includes the necessary dependencies for connecting to a MySQL database. Add the MySQL Connector/J dependency to your pom.xml file:

<dependencies>
    <!-- Spring Boot Starter for Data JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    
    <!-- Spring Boot Starter for Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Azure Web App Maven Plugin -->
    <dependency>
        <groupId>com.microsoft.azure</groupId>
        <artifactId>azure-webapp-maven-plugin</artifactId>
        <version>2.13.0</version>
    </dependency>

    <!-- MySQL Connector/J -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <scope>runtime</scope>
    </dependency>
    
    <!-- Spring Boot Starter for Testing -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>        
Step 8: Connect Application
To ensure your Spring Boot application successfully connects to the Azure MySQL Server and performs database operations, follow these simple steps.


Run Your Application Locally: Start your Spring Boot application locally and verify that it launches without errors. Check the application logs to ensure there are no database connection issues.
Test CRUD Operations: Implement basic Create, Read, Update, and Delete (CRUD) operations in your application to interact with the database. This ensures that your application can store and retrieve data from the Azure MySQL Server.
Unit Testing: Write unit tests to validate the functionality of your database repositories and services. Use tools like JUnit and Mockito to mock dependencies and test database-related logic in isolation.
Integration Testing: Write integration tests to verify the interaction between your application and the database. Use Spring’s @SpringBootTest annotation to load the application context and perform tests against a test database.
Database Management Tools: Utilize database management tools such as MySQL Workbench or Azure Data Studio to connect to your Azure MySQL Server. Confirm that the database schema, tables, and data are created correctly.
By following these straightforward steps, you can ensure that your Spring Boot application seamlessly connects to the Azure MySQL Server and performs essential database operations, guaranteeing reliable functionality in your cloud environment.